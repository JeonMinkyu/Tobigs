install.packages('recommenderlab')
if (!require(lsa)) install.packages("ggplot2")
if (!require(lsa)) install.packages("stringr")
if (!require(lsa)) install.packages("tidyverse")
install.packages('matrixStats')
library(recommenderlab)
library(ggplot2)
library(tidyverse)
if (!require(lsa)) install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(stringr)
library(matrixStats)
if (!require(lsa)) install.packages("lsa")
install.packages("lsa")
library(tidyverse)
if (!require(lsa)) install.packages("tidyverse")
if (!require(lsa)) install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages('matrixStats')
library(recommenderlab)
library(ggplot2)
library(tidyverse)
library(stringr)
library(matrixStats)
install.packages("lsa")
data_packages <- data(package = "recommenderlab")
data_packages$results[, c("Item", "Title")]
data(MovieLense)
class(MovieLense)
similarity_users <-  similarity(MovieLense[1:4,] , method = "cosine", which = 'users')
class(similarity_users)
similarity_users
image(as.matrix(similarity_users), main = "유저 유사도")
class(MovieLense@data)
vector_ratings = as.vector(MovieLense@data)
unique(vector_ratings) # 5점만점 그리고 최저가 0점인것을 볼 수 있다.
table_ratins  = table(vector_ratings);table_ratins
vector_ratings = vector_ratings[vector_ratings != 0 ]
vector_ratings
vector_ratings = factor(vector_ratings)
qplot(vector_ratings) + ggtitle("점수에 대한 분포")
views_per_movie = colCounts(MovieLense)
views_per_movie = colCounts(MovieLense)
colCounts(MovieLense)
table_views = data.frame(movie = names(views_per_movie), view= views_per_movie)
table_views = table_views[order(table_views$view, decreasing = T),]
ggplot(table_views[1:6,], aes(x = movie , y = view)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45 ,hjust = 1))+
ggtitle("top 조회수 영화 목록")
data(MovieLense)
MovieLense
class(MovieLense)
similarity_users <-  similarity(MovieLense[1:4,] , method = "cosine", which = 'users')
class(similarity_users)
image(as.matrix(similarity_users), main = "유저 유사도")
class(MovieLense@data) #@로 접근 가능
vector_ratings = as.vector(MovieLense@data)
unique(vector_ratings) # 5점만점 그리고 최저가 0점인것을 볼 수 있다.
table_ratins  = table(vector_ratings);table_ratins #0이 엄청 많음
vector_ratings = vector_ratings[vector_ratings != 0 ]
vector_ratings = factor(vector_ratings)
qplot(vector_ratings) + ggtitle("점수에 대한 분포")
views_per_movie = colCounts(MovieLense)
library(tidyverse)
library(recommenderlab)
library(ggplot2)
data_packages <- data(package = "recommenderlab")
data_packages$results[, c("Item", "Title")]
data(MovieLense)
class(MovieLense)
similarity_users <-  similarity(MovieLense[1:4,] , method = "cosine", which = 'users')
class(similarity_users)
image(as.matrix(similarity_users), main = "유저 유사도")
class(MovieLense@data)
vector_ratings = as.vector(MovieLense@data)
unique(vector_ratings) # 5점만점 그리고 최저가 0점인것을 볼 수 있다.
table_ratins  = table(vector_ratings);table_ratins
vector_ratings = vector_ratings[vector_ratings != 0 ]
vector_ratings = factor(vector_ratings)
qplot(vector_ratings) + ggtitle("점수에 대한 분포")
views_per_movie = colCounts(MovieLense)
table_views = data.frame(movie = names(views_per_movie), view= views_per_movie)
ratings_movies = MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense) > 100]
average_rating_per_user = rowMeans(ratings_movies)
qplot(average_rating_per_user) + stat_bin(binwidth = 0.1) +
ggtitle("Dist of the average rating per user")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("stringr")
library(stringr)
views_per_movie = colCounts(MovieLense)
table_views = data.frame(movie = names(views_per_movie), view= views_per_movie)
n_recommended = 6
recc_predicted  = predict(object = recc_model , newdata = recc_data_test,
n = n_recommended)
which_train = sample(x = c(T,F), size = nrow(ratings_movies),
replace = T, prob = c(0.8,0.2))
which_train = sample(x = c(T,F), size = nrow(ratings_movies),
replace = T, prob = c(0.8,0.2))
ratings_movies = MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense) > 100]
average_rating_per_user = rowMeans(ratings_movies)
qplot(average_rating_per_user) + stat_bin(binwidth = 0.1) +
ggtitle("Dist of the average rating per user")
rating_movies_norm = normalize(rating_movies)
ratings_movies = MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense) > 100]
average_rating_per_user = rowMeans(ratings_movies)
qplot(average_rating_per_user) + stat_bin(binwidth = 0.1) +
ggtitle("Dist of the average rating per user")
library('qqplot')
library('qqplot2')
install.packages("qqplot2")
library('qqplot2')
number_of_items = factor(table(recc_matrix))
chart_title = "dist of the number of items for UBCF"
qplot(number_of_items) + ggtitle(chart_title)
install.packages("ggplot2")
library(ggplot2)
percentage_training = 0.8 # 트레이닝 셋 80%
items_to_keep = 15 # 아이템 수 15개(추천 생성에 사용되는 아이템 최소 개수)
rating_threshold = 3 # 좋고 나쁜 평점의 임계값
n_eval = 1
eval_sets = evaluationScheme(data = ratings_movies, method = "split", train = percentage_training,
given = items_to_keep, goodRating =rating_threshold , k = n_eval)
eval_sets
eval_sets = evaluationScheme(data = ratings_movies, method = "bootstrap", train = percentage_training,
given = items_to_keep, goodRating =rating_threshold , k = n_eval)
eval_sets
n_fold = 4
items_to_keep = 15
rating_threshold = 3
eval_sets = evaluationScheme(data = ratings_movies, method = 'cross-validation', k= n_fold,
given = items_to_keep, goodRating = rating_threshold)
eval_recommender = Recommender(data = getData(eval_sets, "train"), method = 'IBCF',
parameter = NULL)
eval_prediction = predict(object = eval_recommender , newdata = getData(eval_sets, "known"),
n= 10 , type = "ratings")
eval_accuracy = calcPredictionAccuracy(x = eval_prediction, data = getData(eval_sets, "unknown"), byUser =T)
head(eval_accuracy)
head(eval_accuracy)
results = evaluate(x = eval_sets, method = "IBCF", n= seq(10,100,10))
head(getConfusionMatrix(results)[[1]])
plot(results, annotate = T, main = "ROC curve")
model_to_evaluate = list(
IBCF_cos = list(name = "IBCF", param = list(method = "cosine")),
IBCF_cor = list(name = "IBCF", param = list(method = "pearson")),
UBCF_cos = list(name = "UBCF", param = list(method = "cosine")),
UBCF_cor = list(name = "UBCF", param = list(method = "pearson")),
random = list(name = "RANDOM", param = NULL)
)
n_recommedations = c(1,5, seq(10, 100, 10))
n_recommedations = c(1,5, seq(10, 100, 10))
n_recommedations
list_results = evaluate(x = eval_sets , method = model_to_evaluate, n=n_recommedations)
avg_matrices = lapply(list_results, avg)
head(avg_matrices$IBCF_cos[,5:8])
plot(list_results, annotate = 1, legend = "topleft")
title("ROC curve")
plot(list_results , "prec/rec", annotate = 1, legend = "bottomright")
title("precision-recall")
vector_k = c(5,10,20,30,40)
models_to_evaluate = lapply(vector_k, function(k){
list(name = "IBCF", param = list(method = "cosine", k = k))
})
names(models_to_evaluate) = paste0("IBCF_k_", vector_k)
n_recommendations = c(1,5, seq(10,100,10))
list_results = evaluate(x = eval_sets, method = models_to_evaluate, n = n_recommendations)
plot(list_results, annotate = 1 , legend = "topleft", title("ROC curve"))
title("ROC curve")
plot(list_results, "prec/rec", annotate = 1, legend = "bottomright")
title("Precision-recall")
library(tidyverse)
library(stringr)
library(matrixStats)
library(lsa)
rating_df <- tribble(
~ user, ~배트맨,  ~겟아웃,  ~위대한쇼맨, ~인터스텔라,
"현경",     1 ,      2 ,      8 ,     10,
"인호",     10,       7,       8,      3,
"유리",     8 ,      9 ,      9 ,     2,
"용재",     4 ,      5 ,      9 ,     7)
rating_mat <- rating_df %>%
remove_rownames() %>%
column_to_rownames(var="user") %>%
as.matrix()
DT::datatable(rating_mat)
rating_svd <- svd(rating_mat)
D <- diag(rating_svd$d)
D
rating_svd
D
plot(cumsum(rating_svd$d^2/sum(rating_svd$d^2)), type="l",
xlab = "Singular vector", ylab = "Cumulative percent of variance explained")
abline(v = 2, col="red")
D <- diag(rating_svd$d[1:2])
U <- rating_svd$u[1:4,1:2]
V <- rating_svd$v[1:4,1:2]
cor(U%*%D%*%t(V))  # 분해 결과
cor((rating_mat)) # 원본
rating_approx <- U %*% D %*% t(V) #  X = U D V'
sum(rating_mat - rating_approx)
rating_mat
rating_mat[2,c(2,4)] <- NA # 인호가 영화 두개를 보지 않았다
rating_mat
rating_mat[2,c(2,4)] <- rating_mean[2]
rating_mat[2,c(2,4)] <- rating_mean[2]
rating_mat[2,c(2,4)] <- NA # 인호가 영화 두개를 보지 않았다
rating_mat
rating_mat[2,c(2,4)] <- rating_mean[2]
rating_mat[2,c(2,4)] <- 9
rating_svd2 <- svd(rating_mat)
D <- diag(rating_svd2$d)
D
D[3:4, 3:4] <- 0 # 고유값 두개만 선택 -> 차원 축소
rating_mat
after <- rating_svd2$u %*% D %*% t(rating_svd2$v) #  X = U D V'
sum(rating_mat-after)
movie_which = which(after[2,]==max(after[2,c(2,4)]))
colnames(rating_mat)[movie_which] # 인호를 위한 영화 추천
if (!require(lsa)) install.packages("ggplot2")
if (!require(lsa)) install.packages("stringr")
if (!require(lsa)) install.packages("tidyverse")
library(tidyverse)
library(recommenderlab)
library(ggplot2)
library(stringr)
data_packages <- data(package = "recommenderlab")
data_packages$results[, c("Item", "Title")]
data(MovieLense)
class(MovieLense)
similarity_users <-  similarity(MovieLense[1:4,] , method = "cosine", which = 'users')
similarity_users
class(similarity_users)
image(as.matrix(similarity_users), main = "유저 유사도")
class(MovieLense@data)
vector_ratings = as.vector(MovieLense@data)
unique(vector_ratings) # 5점만점 그리고 최저가 0점인것을 볼 수 있다.
table_ratins  = table(vector_ratings);table_ratins
vector_ratings = vector_ratings[vector_ratings != 0 ]
vector_ratings = factor(vector_ratings)
qplot(vector_ratings) + ggtitle("점수에 대한 분포")
views_per_movie = colCounts(MovieLense)
table_views = data.frame(movie = names(views_per_movie), view= views_per_movie)
table_views = table_views[order(table_views$view, decreasing = T),]
ggplot(table_views[1:6,], aes(x = movie , y = view)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45 ,hjust = 1))+
ggtitle("top 조회수 영화 목록")
image(MovieLense, main = "Heatmap of the rating matrix")
image(MovieLense[1:10, 1:15], main = "Heatmap of the first rows and columns")
min_n_movies  = quantile(rowCounts(MovieLense), 0.99)
min_n_users  = quantile(colCounts(MovieLense), 0.99)
min_n_users
image(MovieLense[rowCounts(MovieLense) > min_n_movies,
colCounts(MovieLense) > min_n_users], main = "Heatmap of the top rows and columns")
ratings_movies = MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense) > 100]
library('qqplot2')
average_rating_per_user = rowMeans(ratings_movies)
library(qqplot2)
average_rating_per_user = rowMeans(ratings_movies)
qplot(average_rating_per_user) + stat_bin(binwidth = 0.1) +
ggtitle("Dist of the average rating per user")
rating_movies_norm = normalize(rating_movies)
sum(rowMeans(rating_movies_norm)>0.00001) # 0으로 정규화 ok
which_train = sample(x = c(T,F), size = nrow(ratings_movies),
replace = T, prob = c(0.8,0.2))
recc_data_train = ratings_movies[which_train,]
recc_data_test = ratings_movies[!which_train,]
recommender_models = recommenderRegistry$get_entries(dataType  = "realRatingMatrix")
recommender_models$IBCF_realRatingMatrix$parameters
recc_model = Recommender(data = recc_data_train, method = "IBCF",
parameter = list(k = 30))
model_details = getModel(recc_model)
model_details$description
model_details$sim # 이안에 유사도 매트릭스 포함하고 있다
image(model_details$sim[1:20, 1:20])
n_recommended = 6
recc_predicted  = predict(object = recc_model , newdata = recc_data_test,
n = n_recommended)
recc_user_1 = recc_predicted@items[[1]];recc_user_1
movies_user_1 = recc_predicted@itemLabels[recc_user_1];movies_user_1
recc_matrix = sapply(recc_predicted@items, function(x){colnames(rating_movies)[x]})
recc_matrix[,1:4]
recc_model  = Recommender(data = recc_data_train, method = "UBCF")
